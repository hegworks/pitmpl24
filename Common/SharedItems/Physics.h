#pragma once

#include "btBulletDynamicsCommon.h"
#include "glm.hpp"

namespace Uknitty
{

class Physics
{
public:
	Physics();
	~Physics();

	void Initialze(glm::vec3 position, glm::vec3 scale, float mass);

	// best to allow our Object to set and return use things in accessors
	//void SetShape(btCollisionShape* collisionShape) { m_collisionShape = collisionShape; }
	//void SetRighidBody(btRigidBody* rigidBody) { m_rigidBody = rigidBody; }

	btCollisionShape* GetShape() { return m_collisionShape; }
	btRigidBody* GetRigidBody() { return m_rigidBody; }
	btMotionState* GetMotionState() { return m_motionState; }

	//// couple of useful utility functions to simplify the rotate and position of our physics objects 
	//// these act on the Rigid body and therefore will reposition/orient an object while it is
	//// in the physics world, useful for restarting or teleporting.
	void SetOrientation(btQuaternion rotation)
	{
		// could just m_body->setXXX but there's a slim chance you might add multiple rigid bodies to an object
		// and you would make GetRigidBody return the active one, so this is a safer method to allow for later expansion
		m_rigidBody->setWorldTransform(btTransform(rotation, m_rigidBody->getWorldTransform().getOrigin()));
	}

	void SetPosition(btVector3 position)
	{
		m_rigidBody->setWorldTransform(btTransform(m_rigidBody->getOrientation(), position));
	}

	// This gets the Motionstate transform, which is useful variables made available after the step
	// as these are generated by the step system, they should be used as read only, as writing to them
	// has no effect and sending them back to the motionstate is not useful,
	void GetTransform()
	{
		if(m_motionState)
			m_motionState->getWorldTransform(m_rigidBody->getWorldTransform()); //this is the important part
	}

private:
	btRigidBody* m_rigidBody = nullptr;
	btCollisionShape* m_collisionShape = nullptr;
	btMotionState* m_motionState = nullptr; // the general position, orientation and scale of our object to return back
};

} // namespace Uknitty
